{"version":3,"sources":["components/TodoList/TodoList.tsx","components/Todo/Todo.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterOptions","Todo","todo","changeUser","selectedUserId","className","classNames","completed","type","checked","name","createdAt","readOnly","title","userId","onClick","id","TodoList","todos","useState","query","setQuery","all","filter","setFilter","filteredTodos","toLowerCase","includes","complited","uncomplited","value","placeholder","onChange","event","target","map","request","url","fetch","then","response","json","CurrentUser","selectedUser","setSelectedUser","useEffect","userFromServer","catch","error","console","log","message","email","phone","App","setSelectedUserId","setTodos","getCurrentTodos","currentTodosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.826548c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../Todo';\n\ntype Props = {\n  todos: Todo[];\n  changeUser: (userId: number) => void;\n  selectedUserId: number,\n};\n\nenum FilterOptions {\n  all,\n  complited,\n  uncomplited,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  changeUser,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState<FilterOptions>(FilterOptions.all);\n\n  const visibleTodos = todos.filter((todo) => {\n    const { title } = todo;\n\n    return title.toLowerCase().includes(query);\n  });\n\n  const filteredTodos = visibleTodos.filter((todo) => {\n    switch (filter) {\n      case FilterOptions.complited: {\n        return todo.completed === true;\n      }\n\n      case FilterOptions.uncomplited: {\n        return todo.completed === false;\n      }\n\n      default:\n        return todo;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        id=\"search-query\"\n        className=\"TodoList__search\"\n        value={query}\n        placeholder=\"Type search word\"\n        onChange={event => setQuery(event.target.value.toLowerCase())}\n        data-cy=\"filterByTitle\"\n      />\n      <select\n        className=\"TodoList__select\"\n        onChange={(event) => setFilter(+event.target.value)}\n      >\n        <option\n          value={FilterOptions.all}\n        >\n          Show all\n        </option>\n        <option\n          value={FilterOptions.complited}\n        >\n          Show complited\n        </option>\n        <option\n          value={FilterOptions.uncomplited}\n        >\n          Show uncomplited\n        </option>\n      </select>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodos.map(todo => (\n            <Todo\n              key={todo.id}\n              todo={todo}\n              changeUser={changeUser}\n              selectedUserId={selectedUserId}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Todo.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todo: Todo,\n  changeUser: (userId: number) => void;\n  selectedUserId: number,\n};\n\nexport const Todo: React.FC<Props> = ({\n  todo,\n  changeUser,\n  selectedUserId,\n}) => {\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        'Todo-item',\n        {\n          'Todo-item--unchecked': !todo.completed,\n          'Todo-item--checked': todo.completed,\n        },\n      )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          name={todo.createdAt}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'Todo-item__user-button', 'button',\n          {\n            'Todo-item__user-button--selected':\n            todo.userId === selectedUserId,\n          },\n        )}\n        type=\"button\"\n        onClick={() => changeUser(todo.userId)}\n      >\n        {`User #${todo.userId}`}\n      </button>\n    </li>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number;\n  changeUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props>\n= ({ selectedUserId, changeUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then((userFromServer) => {\n        setSelectedUser(userFromServer);\n      })\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.log(error.message);\n        setSelectedUser(null);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {selectedUserId}\n        </span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      {selectedUserId && (\n        <button\n          type=\"submit\"\n          className=\"button CurrentUser__clear-button\"\n          onClick={() => changeUser(0)}\n          data-cy=\"userButton\"\n        >\n          Clear\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const changeUser = (userId: number) => setSelectedUserId(userId);\n\n  const getCurrentTodos = () => {\n    getTodos()\n      .then((currentTodosFromServer) => {\n        setTodos(currentTodosFromServer);\n      });\n  };\n\n  useEffect(() => {\n    getCurrentTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          changeUser={changeUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              changeUser={changeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}