{"version":3,"sources":["components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Todo","todo","changeUser","selectedUserId","useState","checked","setChecked","userId","setUserId","className","classNames","type","name","createdAt","onChange","readOnly","title","onClick","id","TodoList","todos","currentQuery","visibleTodos","filter","includes","map","request","url","fetch","then","response","json","getTodos","CurrentUser","selectedUser","setSelectedUser","useEffect","userFromServer","email","phone","App","setSelectedUserId","setTodos","query","setQuery","getCurrentTodos","currentTodosFromServer","value","placeholder","event","target","toLowerCase","completed","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03c79818.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Todo.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todo: Todo,\n  changeUser: (userId: number) => void;\n  selectedUserId: number,\n};\n\nexport const Todo: React.FC<Props> = ({\n  todo,\n  changeUser,\n  selectedUserId,\n}) => {\n  const [checked, setChecked] = useState(false);\n  const [userId, setUserId] = useState(0);\n\n  const clickHandler = () => {\n    changeUser(todo.userId);\n    setUserId(todo.userId);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        'Todo-item',\n        { 'Todo-item--unchecked': !checked },\n        { 'Todo-item--checked': checked },\n      )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          name={todo.createdAt}\n          onChange={() => setChecked(!checked)}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'Todo-item__user-button', 'button',\n          {\n            'Todo-item__user-button--selected':\n            userId === selectedUserId,\n          },\n          {\n            'Todo-item__user-button--selected':\n            selectedUserId === 0,\n          },\n        )}\n        type=\"button\"\n        onClick={clickHandler}\n      >\n        {`User ${todo.userId}`}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../Todo';\n\ntype Props = {\n  todos: Todo[];\n  currentQuery: string;\n  changeUser: (userId: number) => void;\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  currentQuery,\n  changeUser,\n  selectedUserId,\n}) => {\n  const visibleTodos = todos.filter((todo) => {\n    const { title } = todo;\n\n    return title.includes(currentQuery);\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map(todo => (\n            <Todo\n              key={todo.id}\n              todo={todo}\n              changeUser={changeUser}\n              selectedUserId={selectedUserId}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\n// export function getTodos(): Promise<Todo[]> {\n//   return fetch(API_URL)\n//     .then(response => response.json());\n// }\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number;\n  changeUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props>\n= ({ selectedUserId, changeUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then((userFromServer) => {\n        setSelectedUser(userFromServer);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {selectedUserId}\n        </span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      {selectedUserId && (\n        <button\n          type=\"submit\"\n          className=\"button\"\n          onClick={() => changeUser(0)}\n          data-cy=\"userButton\"\n        >\n          Clear\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n\n  const changeUser = (userId: number) => setSelectedUserId(userId);\n\n  const getCurrentTodos = () => {\n    getTodos()\n      .then((currentTodosFromServer) => {\n        setTodos(currentTodosFromServer);\n      });\n  };\n\n  useEffect(() => {\n    getCurrentTodos();\n  }, []);\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value === 'all') {\n      getCurrentTodos();\n    }\n\n    if (event.target.value === 'complited') {\n      getTodos()\n        .then((currentTodosFromServer) => {\n          setTodos(\n            currentTodosFromServer\n              .filter((todo: Todo) => todo.completed),\n          );\n        });\n    }\n\n    if (event.target.value === 'uncomplited') {\n      getTodos()\n        .then((currentTodosFromServer) => {\n          setTodos(\n            currentTodosFromServer\n              .filter((todo: Todo) => !todo.completed),\n          );\n        });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"App__search\"\n          value={query}\n          placeholder=\"Type search word\"\n          onChange={event => setQuery(event.target.value.toLowerCase())}\n          data-cy=\"filterByTitle\"\n        />\n        <select\n          value=\"all\"\n          className=\"App__select\"\n          onChange={selectHandler}\n        >\n          <option\n            value=\"all\"\n            disabled\n          >\n            Choose task status\n          </option>\n          <option\n            value=\"all\"\n          >\n            Show all\n          </option>\n          <option\n            value=\"complited\"\n          >\n            Show complited\n          </option>\n          <option\n            value=\"uncomplited\"\n          >\n            Show uncomplited\n          </option>\n        </select>\n        <TodoList\n          todos={todos}\n          currentQuery={query}\n          changeUser={changeUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              changeUser={changeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}